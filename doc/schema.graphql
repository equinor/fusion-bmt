schema {
  query: GraphQuery
  mutation: Mutation
}

type Action {
  id: String
  questionId: String!
  assignedTo: Participant
  title: String
  description: String
  priority: Priority
  onHold: Boolean!
  dueDate: DateTime!
  createDate: DateTime!
  createdBy: Participant
  notes: [Note]
  question: Question
}

type Answer {
  id: String
  questionId: String!
  progression: Progression!
  severity: Severity
  text: String
  createDate: DateTime!
  answeredBy: Participant
  question: Question
}

type AuthorizeDirective {
  policy: String
  roles: [String!]
  apply: ApplyPolicy!
}

type Evaluation {
  id: String
  name: String!
  projectId: String!
  createDate: DateTime!
  progression: Progression!
  participants: [Participant]
  questions: [Question]
  project: Project
}

type GraphQuery {
  projects: [Project]
  project(fusionProjectID: String): Project
}

type Mutation {
  createEvaluation(name: String projectId: String azureUniqueId: String): Evaluation
  createParticipant(azureUniqueId: String evaluationId: String organization: Organization! role: Role!): Participant
  createAnswer(answeredBy: ParticipantInput progression: Progression! questionId: String severity: Severity! text: String): Answer
}

type Note {
  id: String
  actionId: String!
  text: String
  createdBy: Participant
  createDate: DateTime!
  action: Action
}

type Participant {
  id: String
  evaluationId: String!
  azureUniqueId: String!
  organization: Organization!
  role: Role!
  createDate: DateTime!
  evaluation: Evaluation
}

type Project {
  id: String
  fusionProjectId: String!
  createDate: DateTime!
  evaluations: [Evaluation]
}

type Question {
  id: String
  evaluationId: String!
  questionTemplateId: String!
  organization: Organization!
  text: String
  supportNotes: String
  barrier: Barrier!
  createDate: DateTime!
  answers: [Answer]
  actions: [Action]
  evaluation: Evaluation
  questionTemplate: QuestionTemplate
}

type QuestionTemplate {
  id: String
  status: Status!
  organization: Organization!
  text: String
  supportNotes: String
  barrier: Barrier!
  createDate: DateTime!
  questions: [Question]
}

input ActionInput {
  id: String
  questionId: String!
  assignedTo: ParticipantInput
  title: String
  description: String
  priority: Priority
  onHold: Boolean!
  dueDate: DateTime!
  createDate: DateTime!
  createdBy: ParticipantInput
  notes: [NoteInput]
  question: QuestionInput
}

input AnswerInput {
  id: String
  questionId: String!
  progression: Progression!
  severity: Severity
  text: String
  createDate: DateTime!
  answeredBy: ParticipantInput
  question: QuestionInput
}

input EvaluationInput {
  id: String
  name: String!
  projectId: String!
  createDate: DateTime!
  progression: Progression!
  participants: [ParticipantInput]
  questions: [QuestionInput]
  project: ProjectInput
}

input NoteInput {
  id: String
  actionId: String!
  text: String
  createdBy: ParticipantInput
  createDate: DateTime!
  action: ActionInput
}

input ParticipantInput {
  id: String
  evaluationId: String!
  azureUniqueId: String!
  organization: Organization!
  role: Role!
  createDate: DateTime!
  evaluation: EvaluationInput
}

input ProjectInput {
  id: String
  fusionProjectId: String!
  createDate: DateTime!
  evaluations: [EvaluationInput]
}

input QuestionInput {
  id: String
  evaluationId: String!
  questionTemplateId: String!
  organization: Organization!
  text: String
  supportNotes: String
  barrier: Barrier!
  createDate: DateTime!
  answers: [AnswerInput]
  actions: [ActionInput]
  evaluation: EvaluationInput
  questionTemplate: QuestionTemplateInput
}

input QuestionTemplateInput {
  id: String
  status: Status!
  organization: Organization!
  text: String
  supportNotes: String
  barrier: Barrier!
  createDate: DateTime!
  questions: [QuestionInput]
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

enum Barrier {
  GM
  PS1
  PS2
  PS3
  PS4
  PS5
  PS6
  PS7
  PS12
  PS15
  PS22
}

enum Organization {
  COMMISSIONING
  CONSTRUCTION
  ENGINEERING
  PRE_OPS
  ALL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Progression {
  NOMINATION
  PREPARATION
  ALIGNMENT
  WORKSHOP
  FOLLOW_UP
}

enum Role {
  PARTICIPANT
  FACILITATOR
  READ_ONLY
}

enum Severity {
  LOW
  LIMITED
  HIGH
  NA
}

enum Status {
  ACTIVE
  INACTIVE
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL serviceâ€™s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime