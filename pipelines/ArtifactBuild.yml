trigger:
    branches:
        include:
            - master
    tags:
        include:
            - v*
    paths:
        exclude:
            - /*
pool:
    vmImage: "ubuntu-latest"

stages:
    - stage: Build_Frontend_App
      displayName: "Build Frontend App"
      jobs:
          - job: "Deploy_Fusion_BMT"
            steps:
                - task: UseDotNet@2
                  displayName: "Install Dotnet"
                  inputs:
                      packageType: "sdk"
                      version: "5.0.x"

                - task: DotNetCoreCLI@2
                  displayName: Install dotnet-ef
                  inputs:
                      command: "custom"
                      custom: "tool"
                      arguments: "install --global dotnet-ef"
                - task: NodeTool@0
                  inputs:
                      versionSpec: "16.x"
                - task: Npm@1
                  displayName: "Install frontend"
                  inputs:
                      command: "install"
                      workingDir: "frontend"
                - task: Npm@1
                  displayName: "Bundle frontend"
                  inputs:
                      command: "custom"
                      workingDir: "frontend"
                      customCommand: "run-script build"
                - task: PublishPipelineArtifact@1
                  inputs:
                      targetPath: "$(Pipeline.Workspace)/s/frontend/out/bmt.zip"
                      artifactName: FusionBMT

    - stage: Build_Backend_Container
      displayName: "Build Backend"
      dependsOn: []
      jobs:
          - job: "BuildimageandpushtoACR"
            steps:
                - script: |
                      docker login -u $(dt_tenant) $(dt_url) --password $(dt_password)
                  displayName: "docker login dynatrace"
                - script: |
                      docker build -f $(Build.SourcesDirectory)/backend/dynatrace.Dockerfile \
                      --build-arg dt_url=$(dt_url) \
                      --build-arg dt_tenant=$(dt_tenant) \
                      $(Build.SourcesDirectory)/backend/ \
                      -t fusionbmt.azurecr.io/backend:release \
                      -t fusionbmt.azurecr.io/backend:$(Build.BuildId)
                  displayName: "docker build with OneAgent"

                - task: Docker@2
                  displayName: "Push container to ACR"
                  inputs:
                      containerRegistry: "BMT Registry"
                      repository: "backend"
                      command: "push"
                      tags: $(Build.BuildId)

    - stage: Build_Frontend_Container
      displayName: "Build frondendcontainer with OneAgent"
      dependsOn: []
      jobs:
          - job: "BuildimageandpushtoACR"
            steps:
                - script: |
                      docker login -u $(dt_tenant) $(dt_url) --password $(dt_password)
                  displayName: "docker login dynatrace"

                - task: Bash@3
                  displayName: "docker build with OneAgent"
                  inputs:
                      targetType: "inline"
                      script: |
                          docker build -f $(Build.SourcesDirectory)/frontend/dynatrace.Dockerfile \
                          --build-arg dt_url=$(dt_url) \
                          --build-arg dt_tenant=$(dt_tenant) \
                          $(Build.SourcesDirectory)/frontend/ \
                          -t fusionbmt.azurecr.io/frontend:release \
                          -t fusionbmt.azurecr.io/frontend:$(Build.BuildId)
                      workingDirectory: "$(Build.SourcesDirectory)/frontend/"
                - task: Docker@2
                  displayName: "Push container to ACR"
                  inputs:
                      containerRegistry: "BMT Registry"
                      repository: "frontend"
                      command: "push"
                      tags: |
                          $(Build.BuildId)
                          release

    - stage: CI_Environment
      dependsOn: # this stage runs after buildfrontend and buildbackend
          - Build_Frontend_App
          - Build_Backend_Container
          - Build_Frontend_Container
      jobs:
          - deployment: EnableCIEnvironment
            environment: CI
            strategy:
                runOnce:
                    deploy:
                        steps:
                            - bash: |
                                  echo '##vso[task.setvariable variable=ciApproval;]true'
    - template: templates/stage-deploy-frontend.yml
      parameters:
          name: Deploy_Frontend_CI
          envshortname: ci
          envfullname: ci-deploy
          dependsOn: CI_Environment
          fusionToken: "$(tokenResource)"
          fusionBundlePath: "$(Agent.BuildDirectory)/bmt.zip"
          portalUrl: "https://pro-s-portal-ci.azurewebsites.net"
          buildId: $(Build.BuildId)

    - template: templates/stage-deploy-backend.yml
      parameters:
          name: Deploy_Backend_CI
          envshortname: ci
          envfullname: ci-deploy
          dependsOn: CI_Environment
          buildId: $(Build.BuildId)

    - template: templates/stage-trigger-radix.yml
      parameters:
          name: Trigger_Radix_BuildDeploy_CI
          radixToken: $(RadixToken)
          buildId: $(Build.BuildId)
          envshortname: CI

    - template: templates/stage-deploy-approval.yml
      parameters:
          envshortname: qa
          dependsOn: Trigger_Radix_BuildDeploy_CI

    - template: templates/stage-deploy-frontend.yml
      parameters:
          name: Deploy_Frontend_QA
          envshortname: qa
          envfullname: qa-deploy
          dependsOn: qa_Environment
          fusionToken: "$(tokenResource)"
          fusionBundlePath: "$(Agent.BuildDirectory)/bmt.zip"
          portalUrl: "https://pro-s-portal-fqa.azurewebsites.net/"
          buildId: $(Build.BuildId)

    - template: templates/stage-deploy-backend.yml
      parameters:
          name: Deploy_Backend_QA
          envshortname: qa
          envfullname: qa-deploy
          dependsOn: qa_Environment
          buildId: $(Build.BuildId)

    - template: templates/stage-trigger-radix.yml
      parameters:
          name: Trigger_Radix_BuildDeploy_QA
          radixToken: $(RadixToken)
          buildId: $(Build.BuildId)
          envshortname: QA

    - template: templates/stage-deploy-approval.yml
      parameters:
          envshortname: Production
          dependsOn: Trigger_Radix_BuildDeploy_QA

    - template: templates/stage-deploy-frontend.yml
      parameters:
          name: Deploy_Frontend_Production
          envshortname: Production
          envfullname: prod-deploy
          dependsOn: Production_Environment
          fusionToken: "$(tokenResource)"
          fusionBundlePath: "$(Agent.BuildDirectory)/bmt.zip"
          portalUrl: "https://pro-s-portal-fprd.azurewebsites.net"
          buildId: $(Build.BuildId)

    - template: templates/stage-deploy-backend.yml
      parameters:
          name: Deploy_Backend_Production
          envshortname: Production
          envfullname: prod-deploy
          dependsOn: Production_Environment
          buildId: $(Build.BuildId)

    - template: templates/stage-trigger-radix.yml
      parameters:
          name: Trigger_Radix_BuildDeploy_Prod
          radixToken: $(RadixToken)
          buildId: $(Build.BuildId)
          envshortname: Production
