parameters:
    - name: name
    - name: envshortname
    - name: envfullname
    - name: fusionToken
    - name: fusionBundlePath
    - name: portalUrl
    - name: buildId
    - name: radixToken
    - name: branch

stages:
    - stage: ${{ parameters.name }}
      displayName: "Deploy  ${{ parameters.envshortname }}"
      jobs:
          - deployment: "Deploy_${{ parameters.envshortname }}_Frontend"
            environment: ${{ parameters.envfullname }}
            strategy:
                runOnce:
                    deploy:
                        steps:
                            - task: DownloadPipelineArtifact@2
                              inputs:
                                  artifact: FusionBMT
                            - task: FusionApp@2
                              displayName: "Deploy fusion frontend"
                              inputs:
                                  fusionCredentials: "Fusion BMT"
                                  portalUrl: ${{ parameters.portalUrl }}
                                  action: "Deploy"
                                  appKey: "bmt"
                                  bundlePath: ${{ parameters.fusionBundlePath }}
                                  tokenResource: ${{ parameters.fusionToken }}
                                  ignoreVersionConflict: true
                                  forceReplaceExisting: true

                            - task: FusionApp@2
                              displayName: "Publish fusion frontend"
                              inputs:
                                  fusionCredentials: "Fusion BMT"
                                  portalUrl: ${{ parameters.portalUrl }}
                                  action: "Publish"
                                  appKey: "bmt"
                                  tokenResource: ${{ parameters.fusionToken }}
                                  forceReplaceExisting: true

          - deployment: "Update_${{ parameters.envshortname }}_Tags"
            environment: ${{ parameters.envfullname }}
            strategy:
                runOnce:
                    deploy:
                        steps:
                            - task: Docker@2
                              inputs:
                                  containerRegistry: "BMT Registry"
                                  command: "login"

                            - template: step-tag-dockerimage.yml
                              parameters:
                                  buildid: ${{ parameters.buildid }}
                                  envshortname: ${{ parameters.envshortname }}
                                  registry: "fusionbmt.azurecr.io"
                                  repository: "frontend"

                            - template: step-tag-dockerimage.yml
                              parameters:
                                  buildid: ${{ parameters.buildid }}
                                  envshortname: ${{ parameters.envshortname }}
                                  registry: "fusionbmt.azurecr.io"
                                  repository: "backend"
          - job: Trigger_Radix_Deploy
            dependsOn:
                - Deploy_${{ parameters.envshortname }}_Frontend
                - Update_${{ parameters.envshortname }}_Tags
            displayName: Trigger Radix Deploy
            pool: server
            steps:
                - task: InvokeRESTAPI@1
                  inputs:
                      connectionType: "connectedServiceName"
                      serviceConnection: "radix"
                      method: "POST"
                      headers: |
                          {
                          "Content-Type":"application/json",
                          "Authorization": "Bearer ${{ parameters.radixToken }}"
                          }
                      body: '{"branch": "${{ parameters.branch }}",  "triggeredBy": "${{ parameters.buildId }}-${{ parameters.branch }}"}'
                      urlSuffix: "api/v1/applications/fusion-bmt/pipelines/build-deploy"
                      waitForCompletion: "false"
                      successCriteria: eq(root['status'], 'Waiting')
