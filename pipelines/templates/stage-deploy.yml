parameters:
    - name: name
    - name: envshortname
    - name: envfullname
    - name: fusionToken
    - name: fusionBundlePath
    - name: portalUrl
    - name: buildId
    - name: radixToken
    - name: branch
    - name: DBContext

stages:
    - stage: ${{ parameters.name }}
      displayName: "Deploy  ${{ parameters.envshortname }}"
      jobs:
          - deployment: "Deploy_${{ parameters.envshortname }}_Frontend"
            environment: ${{ parameters.envfullname }}
            strategy:
                runOnce:
                    deploy:
                        steps:
                            - task: DownloadPipelineArtifact@2
                              inputs:
                                  artifact: FusionBMT
                            - task: FusionApp@2
                              displayName: "Deploy fusion frontend"
                              inputs:
                                  fusionCredentials: "Fusion BMT"
                                  portalUrl: ${{ parameters.portalUrl }}
                                  action: "Deploy"
                                  appKey: "bmt"
                                  bundlePath: ${{ parameters.fusionBundlePath }}
                                  tokenResource: ${{ parameters.fusionToken }}
                                  ignoreVersionConflict: true
                                  forceReplaceExisting: true

                            - task: FusionApp@2
                              displayName: "Publish fusion frontend"
                              inputs:
                                  fusionCredentials: "Fusion BMT"
                                  portalUrl: ${{ parameters.portalUrl }}
                                  action: "Publish"
                                  appKey: "bmt"
                                  tokenResource: ${{ parameters.fusionToken }}
                                  forceReplaceExisting: true

          - deployment: "Update_${{ parameters.envshortname }}_Tags"
            environment: ${{ parameters.envfullname }}
            strategy:
                runOnce:
                    deploy:
                        steps:
                            - task: Docker@2
                              inputs:
                                  containerRegistry: "BMT Registry"
                                  command: "login"

                            - template: step-tag-dockerimage.yml
                              parameters:
                                  buildid: ${{ parameters.buildid }}
                                  envshortname: ${{ parameters.envshortname }}
                                  registry: "fusionbmt.azurecr.io"
                                  repository: "frontend"

                            - template: step-tag-dockerimage.yml
                              parameters:
                                  buildid: ${{ parameters.buildid }}
                                  envshortname: ${{ parameters.envshortname }}
                                  registry: "fusionbmt.azurecr.io"
                                  repository: "backend"

          - job: Trigger_Radix_Deploy_${{ parameters.envshortname }}
            dependsOn:
                - Deploy_${{ parameters.envshortname }}_Frontend
                - Update_${{ parameters.envshortname }}_Tags
            displayName: Trigger Radix Deploy
            cancelTimeoutInMinutes: 60
            timeoutInMinutes: 60
            steps:
                - task: PowerShell@2
                  displayName: "Trigger Radix Build-Deploy"
                  inputs:
                      targetType: "inline"
                      script: |
                          $url = "https://api.radix.equinor.com/api/v1/applications/fusion-bmt/pipelines/build-deploy"

                          $requestdata = @{
                              Uri     = "https://api.radix.equinor.com/api/v1/applications/fusion-bmt/pipelines/build-deploy"
                              Headers = @{"Authorization" = "Bearer ${{ parameters.radixToken }}"}
                          }

                          $body = @'
                          {"branch":"${{ parameters.branch }}",
                          "triggeredBy":"${{ parameters.buildId }}-${{ parameters.branch }}"
                          }
                          '@

                          $result = Invoke-RestMethod -Uri $url -Headers $requestdata.Headers -Body $body -Method Post                          
                          $pipelineName = $result.name
                          Write-Host $pipelineName
                          Write-Host "##vso[task.setvariable variable=radixJobName;]$pipelineName"
                          Write-Host "Done. JobName:" $(radixJobName)
                - task: PowerShell@2
                  displayName: "Wait for Radix Build-Deploy job"
                  inputs:
                      targetType: "inline"
                      script: |
                          $url = 'https://api.radix.equinor.com/api/v1/applications/fusion-bmt/jobs/$(radixJobName)'

                          $body = @{
                              Uri     = 'https://api.radix.equinor.com/api/v1/applications/fusion-bmt/jobs/$(radixJobName)'
                              Headers = @{"Authorization" = "Bearer ${{ parameters.radixToken }}"}
                          }

                          $TimeoutAfter = New-TimeSpan -Minutes 60
                          $WaitBetweenPolling = New-TimeSpan -Seconds 10

                          $Timeout = (Get-Date).Add($TimeoutAfter)
                          $stepCounter = 0
                          do
                          {
                              $result = Invoke-RestMethod -Uri $url -Headers $body.Headers 
                              $steps = $result.steps |  where { $_.status -eq "Succeeded" } 
                              if ($stepCounter -eq $steps.Length) {

                              } else {
                                  $stepCounter = $steps.Length
                                  Write-Host "Steps:" $steps.Length "of" $result.steps.length
                              }
                              
                              Start-Sleep -Seconds $WaitBetweenPolling.Seconds

                          }
                          while ((($result.status -eq "Running") -or ($result.status -eq "Waiting")) -and ((Get-Date) -lt $Timeout))

                          if ($result.status -eq "Succeeded")
                          {
                              Write-Host "Build-deploy Success"
                              Write-Host $result
                              [Environment]::Exit(0)
                          } else {
                              Write-Host "Build-deploy Non-success"
                              Write-Host $result
                              [Environment]::Exit(1)

                          }
          - job: AddDbMigrations_${{ parameters.envshortname }}
            dependsOn: Trigger_Radix_Deploy_${{ parameters.envshortname }}
            steps:
                - task: DotNetCoreCLI@2
                  displayName: Install dotnet-ef
                  inputs:
                      command: "custom"
                      custom: "tool"
                      arguments: "install --global dotnet-ef"

                - task: DotNetCoreCLI@2
                  displayName: "Apply DB migrations"
                  inputs:
                      command: "custom"
                      custom: "ef"
                      arguments: "database update --connection ${{ parameters.DBContext }} --verbose"
                      workingDirectory: "$(Build.SourcesDirectory)/backend/api"
